#!/usr/bin/env python3
"""
API endpoints –¥–ª—è Telegram Bot
"""

import logging
import requests
from typing import Dict, Any, List, Optional
from fastapi import APIRouter, HTTPException, Request, Depends, BackgroundTasks
from pydantic import BaseModel
from bot import bot
from sqlalchemy.orm import Session

from db import get_db_session, NewsItem, NewsSource
from services.auto_publisher import auto_publisher
from config import TOKEN, CHANNEL_ID, WEBHOOK_URL

logger = logging.getLogger(__name__)
router = APIRouter(prefix="/telegram", tags=["telegram"])

class TelegramUpdate(BaseModel):
    update_id: int
    message: Dict[str, Any] = None
    callback_query: Dict[str, Any] = None

@router.post("/webhook")
async def webhook_handler(request: Request):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook –æ—Ç Telegram"""
    try:
        data = await request.json()
        logger.info(f"–ü–æ–ª—É—á–µ–Ω webhook: {data}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        if "message" in data:
            message = data["message"]
            chat_id = message["chat"]["id"]
            text = message.get("text", "")
            
            if text.startswith("/"):
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
                command = text.split()[0]
                args = text.split()[1:] if len(text.split()) > 1 else []
                bot.handle_command(chat_id, command, args)
            else:
                # –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                bot.send_message(chat_id, "–ü—Ä–∏–≤–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback queries
        elif "callback_query" in data:
            callback_query = data["callback_query"]
            chat_id = callback_query["message"]["chat"]["id"]
            data_text = callback_query["data"]
            
            await handle_callback_query(chat_id, data_text)
        
        return {"status": "ok"}
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
        return {"status": "error", "message": str(e)}

async def handle_message(message: Dict[str, Any]):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        chat_id = message.get("chat", {}).get("id")
        text = message.get("text", "")
        
        if not chat_id:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å chat_id")
            return
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {chat_id}: {text}")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
        if text.startswith("/"):
            command_parts = text.split()
            command = command_parts[0]
            args = command_parts[1:] if len(command_parts) > 1 else []
            
            bot.handle_command(chat_id, command, args)
        else:
            # –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            response_text = """
ü§ñ <b>Gift Propaganda News Bot</b>

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π:

üì∞ <b>–ö–æ–º–∞–Ω–¥—ã:</b>
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/news - –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏
/nft - –ù–æ–≤–æ—Å—Ç–∏ NFT
/crypto - –ö—Ä–∏–ø—Ç–æ –Ω–æ–≤–æ—Å—Ç–∏
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/help - –ü–æ–º–æ—â—å

–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –Ω–æ–≤–æ—Å—Ç–∏ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç!
"""
            bot.send_message(chat_id, response_text)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

async def handle_callback_query(chat_id: int, data: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback query (–Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏)"""
    try:
        logger.info(f"–ü–æ–ª—É—á–µ–Ω callback query –æ—Ç {chat_id}: {data}")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ callback data
        if data == "news":
            text = bot.get_news_summary(5)
            bot.send_message(chat_id, text)
        elif data == "nft":
            text = bot.get_news_summary(5, category="nft")
            bot.send_message(chat_id, text)
        elif data == "crypto":
            text = bot.get_news_summary(5, category="crypto")
            bot.send_message(chat_id, text)
        elif data == "stats":
            text = bot.get_stats()
            bot.send_message(chat_id, text)
        else:
            bot.send_message(chat_id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback query: {e}")

@router.get("/bot-info")
async def get_bot_info():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ"""
    try:
        import requests
        from config import TOKEN
        
        url = f"https://api.telegram.org/bot{TOKEN}/getMe"
        response = requests.get(url, timeout=10)
        
        if response.status_code == 200:
            bot_info = response.json()
            return {
                "status": "ok",
                "bot_info": bot_info.get("result", {}),
                "webhook_url": f"{bot_info.get('result', {}).get('username', 'unknown')} bot"
            }
        else:
            return {
                "status": "error",
                "message": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ"
            }
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ: {e}")
        return {
            "status": "error",
            "message": str(e)
        }

@router.post("/send-news")
async def send_news_to_chat(chat_id: int, news_id: int = None):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —á–∞—Ç"""
    try:
        if news_id:
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –Ω–æ–≤–æ—Å—Ç–∏
            success = bot.send_news_with_media(chat_id, news_id)
        else:
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–≤–æ–¥–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π
            text = bot.get_news_summary(3)
            success = bot.send_message(chat_id, text)
        
        return {
            "status": "ok" if success else "error",
            "chat_id": chat_id,
            "news_id": news_id
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
        return {
            "status": "error",
            "message": str(e)
        } 

@router.post("/publish-now")
async def publish_news_now(background_tasks: BackgroundTasks):
    """
    –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—É–±–ª–∏–∫—É–µ—Ç –Ω–µ–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –≤ –∫–∞–Ω–∞–ª
    """
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏—é –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ (force=True –¥–ª—è —Ä—É—á–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏)
        background_tasks.add_task(auto_publisher.publish_batch, force=True)
        
        return {
            "message": "Publishing started in background",
            "status": "started"
        }
    except Exception as e:
        logger.error(f"Error starting manual publish: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@router.get("/publish-status")
async def get_publish_status(db: Session = Depends(get_db_session)):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    """
    try:
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_news = db.query(NewsItem).count()
        published_news = db.query(NewsItem).filter(NewsItem.is_published_to_channel == True).count()
        unpublished_news = db.query(NewsItem).filter(NewsItem.is_published_to_channel == False).count()
        
        return {
            "auto_publish_enabled": AUTO_PUBLISH_ENABLED,
            "channel_id": CHANNEL_ID,
            "statistics": {
                "total_news": total_news,
                "published_news": published_news,
                "unpublished_news": unpublished_news
            },
            "settings": {
                "interval_seconds": auto_publisher.interval,
                "batch_limit": auto_publisher.limit,
                "signature": auto_publisher.signature
            }
        }
    except Exception as e:
        logger.error(f"Error getting publish status: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@router.get("/published-news")
async def get_published_news(
    limit: int = 10,
    offset: int = 0,
    db: Session = Depends(get_db_session)
):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
    """
    try:
        published_news = db.query(NewsItem).filter(
            NewsItem.is_published_to_channel == True
        ).order_by(NewsItem.published_to_channel_at.desc()).offset(offset).limit(limit).all()
        
        result = []
        for news in published_news:
            source = db.query(NewsSource).filter(NewsSource.id == news.source_id).first()
            result.append({
                "id": news.id,
                "title": news.title,
                "category": news.category,
                "published_at": news.published_to_channel_at.isoformat() if news.published_to_channel_at else None,
                "telegram_message_id": news.telegram_message_id,
                "source_name": source.name if source else None,
                "link": news.link
            })
        
        return {
            "published_news": result,
            "total": len(result)
        }
    except Exception as e:
        logger.error(f"Error getting published news: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@router.post("/publish-specific/{news_id}")
async def publish_specific_news(news_id: int, db: Session = Depends(get_db_session)):
    """
    –ü—É–±–ª–∏–∫—É–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –Ω–æ–≤–æ—Å—Ç—å –≤ –∫–∞–Ω–∞–ª
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç—å
        news_item = db.query(NewsItem).filter(NewsItem.id == news_id).first()
        if not news_item:
            raise HTTPException(status_code=404, detail="News not found")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –ª–∏ —É–∂–µ
        if news_item.is_published_to_channel:
            return {
                "message": "News already published",
                "telegram_message_id": news_item.telegram_message_id,
                "published_at": news_item.published_to_channel_at.isoformat() if news_item.published_to_channel_at else None
            }
        
        # –ü—É–±–ª–∏–∫—É–µ–º
        message_id = await auto_publisher.publish_news_to_channel(news_item)
        
        if message_id:
            return {
                "message": "News published successfully",
                "telegram_message_id": message_id,
                "news_id": news_id
            }
        else:
            raise HTTPException(status_code=500, detail="Failed to publish news")
    except Exception as e:
        logger.error(f"Error publishing specific news: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@router.get("/test-bot")
async def test_bot():
    """–¢–µ—Å—Ç–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
        url = f"https://api.telegram.org/bot{TOKEN}/getMe"
        response = requests.get(url, timeout=10)
        
        if response.status_code == 200:
            bot_info = response.json()
            return {
                "status": "success",
                "bot_info": bot_info,
                "webhook_url": f"{WEBHOOK_URL}/telegram/webhook",
                "channel_id": CHANNEL_ID
            }
        else:
            return {
                "status": "error",
                "message": f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ: {response.status_code}"
            }
    except Exception as e:
        return {
            "status": "error",
            "message": str(e)
        }


@router.delete("/unpublish/{news_id}")
async def unpublish_news(news_id: int, db: Session = Depends(get_db_session)):
    """
    –û—Ç–º–µ–Ω—è–µ—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏—é –Ω–æ–≤–æ—Å—Ç–∏ (—É–¥–∞–ª—è–µ—Ç –∏–∑ –∫–∞–Ω–∞–ª–∞)
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç—å
        news_item = db.query(NewsItem).filter(NewsItem.id == news_id).first()
        if not news_item:
            raise HTTPException(status_code=404, detail="News not found")
        
        if not news_item.is_published_to_channel or not news_item.telegram_message_id:
            raise HTTPException(status_code=400, detail="News is not published")
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞
        import requests
        response = requests.post(
            f"https://api.telegram.org/bot{auto_publisher.token}/deleteMessage",
            data={
                'chat_id': auto_publisher.channel_id,
                'message_id': news_item.telegram_message_id
            },
            timeout=30
        )
        
        if response.status_code == 200:
            result = response.json()
            if result.get('ok'):
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                news_item.is_published_to_channel = False
                news_item.published_to_channel_at = None
                news_item.telegram_message_id = None
                db.commit()
                
                return {
                    "message": "News unpublished successfully",
                    "news_id": news_id
                }
            else:
                raise HTTPException(status_code=500, detail=f"Telegram API error: {result}")
        else:
            raise HTTPException(status_code=500, detail=f"HTTP error {response.status_code}")
            
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Error unpublishing news {news_id}: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@router.get("/channel-info")
async def get_channel_info():
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
    """
    try:
        import requests
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
        response = requests.get(
            f"https://api.telegram.org/bot{auto_publisher.token}/getChat",
            data={'chat_id': auto_publisher.channel_id},
            timeout=30
        )
        
        if response.status_code == 200:
            result = response.json()
            if result.get('ok'):
                chat_info = result['result']
                return {
                    "channel_id": auto_publisher.channel_id,
                    "title": chat_info.get('title'),
                    "description": chat_info.get('description'),
                    "member_count": chat_info.get('member_count'),
                    "type": chat_info.get('type')
                }
            else:
                return {
                    "channel_id": auto_publisher.channel_id,
                    "error": f"Telegram API error: {result}"
                }
        else:
            return {
                "channel_id": auto_publisher.channel_id,
                "error": f"HTTP error {response.status_code}"
            }
            
    except Exception as e:
        logger.error(f"Error getting channel info: {e}")
        return {
            "channel_id": auto_publisher.channel_id,
            "error": str(e)
        } 


