#!/usr/bin/env python3
"""
Telegram Bot –¥–ª—è –Ω–æ–≤–æ—Å—Ç–Ω–æ–≥–æ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–∞
"""

import logging
import requests
from typing import List, Dict, Any, Optional
from config import TOKEN, WEBHOOK_URL
from db import get_db_session, NewsItem, NewsSource
from parsers.telegram_news_service import TelegramNewsService

logger = logging.getLogger(__name__)

class TelegramBot:
    def __init__(self):
        self.token = TOKEN
        self.webhook_url = WEBHOOK_URL
        self.news_service = TelegramNewsService()
        
    def send_message(self, chat_id: int, text: str, parse_mode: str = "HTML"):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç"""
        try:
            url = f"https://api.telegram.org/bot{self.token}/sendMessage"
            data = {
                "chat_id": chat_id,
                "text": text,
                "parse_mode": parse_mode
            }
            
            response = requests.post(url, data=data, timeout=10)
            if response.status_code == 200:
                logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id}")
                return True
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {response.text}")
                return False
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False
    
    def send_news_with_media(self, chat_id: int, news_id: int):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ—Å—Ç–∏ —Å –º–µ–¥–∏–∞"""
        try:
            db = get_db_session()
            news_item = db.query(NewsItem).filter(NewsItem.id == news_id).first()
            
            if not news_item:
                self.send_message(chat_id, "‚ùå –ù–æ–≤–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏
            text = f"""
üì∞ <b>{news_item.title}</b>

{news_item.content[:500]}{'...' if len(news_item.content) > 500 else ''}

üìÖ –î–∞—Ç–∞: {news_item.publish_date.strftime('%d.%m.%Y %H:%M')}
üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {news_item.category}
üë§ –ê–≤—Ç–æ—Ä: {news_item.author or '–ù–µ —É–∫–∞–∑–∞–Ω'}

üîó <a href="{news_item.link}">–ß–∏—Ç–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é</a>
"""
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å –º–µ–¥–∏–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
            if news_item.image_url:
                self.send_photo(chat_id, news_item.image_url, text)
            elif news_item.video_url:
                self.send_video(chat_id, news_item.video_url, text)
            else:
                self.send_message(chat_id, text)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ—Å—Ç–∏: {e}")
            self.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ—Å—Ç–∏")
        finally:
            if 'db' in locals():
                db.close()
    
    def send_photo(self, chat_id: int, photo_url: str, caption: str = ""):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ"""
        try:
            url = f"https://api.telegram.org/bot{self.token}/sendPhoto"
            data = {
                "chat_id": chat_id,
                "photo": photo_url,
                "caption": caption,
                "parse_mode": "HTML"
            }
            
            response = requests.post(url, data=data, timeout=10)
            if response.status_code == 200:
                logger.info(f"–§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id}")
                return True
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {response.text}")
                return False
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
            return False
    
    def send_video(self, chat_id: int, video_url: str, caption: str = ""):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ"""
        try:
            url = f"https://api.telegram.org/bot{self.token}/sendVideo"
            data = {
                "chat_id": chat_id,
                "video": video_url,
                "caption": caption,
                "parse_mode": "HTML"
            }
            
            response = requests.post(url, data=data, timeout=10)
            if response.status_code == 200:
                logger.info(f"–í–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id}")
                return True
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ: {response.text}")
                return False
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ: {e}")
            return False
    
    def handle_command(self, chat_id: int, command: str, args: List[str]):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥"""
        try:
            if command == "/start":
                self.send_start_message(chat_id)
            elif command == "/news":
                self.send_news_summary(chat_id, 5)
            elif command == "/nft":
                self.send_news_by_category(chat_id, "nft", 5)
            elif command == "/crypto":
                self.send_news_by_category(chat_id, "crypto", 5)
            elif command == "/gifts":
                self.send_news_by_category(chat_id, "gifts", 5)
            elif command == "/tech":
                self.send_news_by_category(chat_id, "tech", 5)
            elif command == "/stats":
                self.send_stats(chat_id)
            elif command == "/help":
                self.send_help_message(chat_id)
            elif command == "/publish":
                self.publish_to_channel(chat_id)
            else:
                self.send_message(chat_id, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã {command}: {e}")
            self.send_message(chat_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã")
    
    def send_start_message(self, chat_id: int):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        text = """
üéÅ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Gift Propaganda News Bot!</b>

–Ø –ø–æ–º–æ–≥—É –≤–∞–º –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –≤ –º–∏—Ä–µ:
‚Ä¢ üéÅ –ü–æ–¥–∞—Ä–∫–∏ –∏ –∞–∫—Ü–∏–∏
‚Ä¢ üí∞ –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
‚Ä¢ üñºÔ∏è NFT –∏ —Ü–∏—Ñ—Ä–æ–≤–æ–µ –∏—Å–∫—É—Å—Å—Ç–≤–æ
‚Ä¢ üíª –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏

üì∞ <b>–ö–æ–º–∞–Ω–¥—ã:</b>
/news - –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏
/nft - –ù–æ–≤–æ—Å—Ç–∏ NFT
/crypto - –ö—Ä–∏–ø—Ç–æ –Ω–æ–≤–æ—Å—Ç–∏
/gifts - –ü–æ–¥–∞—Ä–∫–∏ –∏ –∞–∫—Ü–∏–∏
/tech - –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/publish - –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤ –∫–∞–Ω–∞–ª
/help - –ü–æ–º–æ—â—å

–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –Ω–æ–≤–æ—Å—Ç–∏ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç!
"""
        self.send_message(chat_id, text)
    
    def send_help_message(self, chat_id: int):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø—Ä–∞–≤–∫–∏"""
        text = """
üìö <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:</b>

/news - –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –Ω–æ–≤–æ—Å—Ç–µ–π
/nft - –ù–æ–≤–æ—Å—Ç–∏ NFT –∏ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –∏—Å–∫—É—Å—Å—Ç–≤–∞
/crypto - –ù–æ–≤–æ—Å—Ç–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –∏ –±–ª–æ–∫—á–µ–π–Ω–∞
/gifts - –ü–æ–¥–∞—Ä–∫–∏, –∞–∫—Ü–∏–∏ –∏ –ø—Ä–æ–º–æ–∫–æ–¥—ã
/tech - –ù–æ–≤–æ—Å—Ç–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –∏ IT
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π
/publish - –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –≤ –∫–∞–Ω–∞–ª
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

üí° <b>–°–æ–≤–µ—Ç—ã:</b>
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
‚Ä¢ –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –Ω–æ–≤–æ—Å—Ç–∏
‚Ä¢ –í—Å–µ —Å—Å—ã–ª–∫–∏ –≤–µ–¥—É—Ç –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
"""
        self.send_message(chat_id, text)
    
    def send_news_summary(self, chat_id: int, limit: int = 5, category: str = None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–≤–æ–¥–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π"""
        try:
            db = get_db_session()
            
            query = db.query(NewsItem)
            if category and category != "all":
                query = query.filter(NewsItem.category == category)
            
            news_items = query.order_by(NewsItem.publish_date.desc()).limit(limit).all()
            
            if not news_items:
                self.send_message(chat_id, "üì≠ –ù–æ–≤–æ—Å—Ç–µ–π –ø–æ–∫–∞ –Ω–µ—Ç")
                return
            
            text = f"üì∞ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏"
            if category:
                text += f" ({category})"
            text += ":</b>\n\n"
            
            for i, news in enumerate(news_items, 1):
                text += f"{i}. <b>{news.title}</b>\n"
                text += f"üìÖ {news.publish_date.strftime('%d.%m %H:%M')}\n"
                text += f"üè∑Ô∏è {news.category}\n"
                text += f"üîó <a href='{news.link}'>–ß–∏—Ç–∞—Ç—å</a>\n\n"
            
            self.send_message(chat_id, text)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–≤–æ–¥–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
            self.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π")
        finally:
            if 'db' in locals():
                db.close()
    
    def send_news_by_category(self, chat_id: int, category: str, limit: int = 5):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        self.send_news_summary(chat_id, limit, category)
    
    def send_stats(self, chat_id: int):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            db = get_db_session()
            
            total_news = db.query(NewsItem).count()
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            categories_stats = {}
            categories = db.query(NewsItem.category).distinct().all()
            
            for cat in categories:
                if cat[0]:
                    count = db.query(NewsItem).filter(NewsItem.category == cat[0]).count()
                    categories_stats[cat[0]] = count
            
            text = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π:</b>\n\n"
            text += f"üì∞ –í—Å–µ–≥–æ –Ω–æ–≤–æ—Å—Ç–µ–π: {total_news}\n\n"
            
            for category, count in categories_stats.items():
                emoji = {
                    'gifts': 'üéÅ',
                    'crypto': 'üí∞',
                    'nft': 'üñºÔ∏è',
                    'tech': 'üíª',
                    'community': 'üë•'
                }.get(category, 'üì¢')
                text += f"{emoji} {category}: {count}\n"
            
            self.send_message(chat_id, text)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            self.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
        finally:
            if 'db' in locals():
                db.close()
    
    def get_news_summary(self, limit: int = 5, category: str = None) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –≤ –≤–∏–¥–µ —Ç–µ–∫—Å—Ç–∞"""
        try:
            db = get_db_session()
            
            query = db.query(NewsItem)
            if category and category != "all":
                query = query.filter(NewsItem.category == category)
            
            news_items = query.order_by(NewsItem.publish_date.desc()).limit(limit).all()
            
            if not news_items:
                return "üì≠ –ù–æ–≤–æ—Å—Ç–µ–π –ø–æ–∫–∞ –Ω–µ—Ç"
            
            text = f"üì∞ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏"
            if category:
                text += f" ({category})"
            text += ":</b>\n\n"
            
            for i, news in enumerate(news_items, 1):
                text += f"{i}. <b>{news.title}</b>\n"
                text += f"üìÖ {news.publish_date.strftime('%d.%m %H:%M')}\n"
                text += f"üè∑Ô∏è {news.category}\n"
                text += f"üîó <a href='{news.link}'>–ß–∏—Ç–∞—Ç—å</a>\n\n"
            
            return text
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
            return "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π"
        finally:
            if 'db' in locals():
                db.close()
    
    def get_stats(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ –≤–∏–¥–µ —Ç–µ–∫—Å—Ç–∞"""
        try:
            db = get_db_session()
            
            total_news = db.query(NewsItem).count()
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            categories_stats = {}
            categories = db.query(NewsItem.category).distinct().all()
            
            for cat in categories:
                if cat[0]:
                    count = db.query(NewsItem).filter(NewsItem.category == cat[0]).count()
                    categories_stats[cat[0]] = count
            
            text = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π:</b>\n\n"
            text += f"üì∞ –í—Å–µ–≥–æ –Ω–æ–≤–æ—Å—Ç–µ–π: {total_news}\n\n"
            
            for category, count in categories_stats.items():
                emoji = {
                    'gifts': 'üéÅ',
                    'crypto': 'üí∞',
                    'nft': 'üñºÔ∏è',
                    'tech': 'üíª',
                    'community': 'üë•'
                }.get(category, 'üì¢')
                text += f"{emoji} {category}: {count}\n"
            
            return text
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"
        finally:
            if 'db' in locals():
                db.close()
    
    def publish_to_channel(self, chat_id: int):
        """–ü—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π –≤ –∫–∞–Ω–∞–ª"""
        try:
            from services.auto_publisher import auto_publisher
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏—é –Ω–∞–ø—Ä—è–º—É—é
            import asyncio
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            async def publish_task():
                try:
                    await auto_publisher.publish_batch(force=True)
                    self.send_message(chat_id, "‚úÖ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π –≤ –∫–∞–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
                    self.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {str(e)}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É
            asyncio.create_task(publish_task())
            self.send_message(chat_id, "üöÄ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π –≤ –∫–∞–Ω–∞–ª –∑–∞–ø—É—â–µ–Ω–∞...")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª: {e}")
            self.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª")

async def setup_webhook():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook –¥–ª—è Telegram –±–æ—Ç–∞"""
    try:
        webhook_url = f"{WEBHOOK_URL}/telegram/webhook"
        logger.info(f"–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook: {webhook_url}")
        
        url = f"https://api.telegram.org/bot{TOKEN}/setWebhook"
        data = {
            "url": webhook_url,
            "allowed_updates": ["message", "callback_query"]
        }
        
        response = requests.post(url, json=data, timeout=10)
        
        if response.status_code == 200:
            result = response.json()
            if result.get("ok"):
                logger.info("Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                return True
            else:
                logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {result}")
                return False
        else:
            logger.error(f"–û—à–∏–±–∫–∞ HTTP –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ webhook: {response.status_code}")
            return False
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {e}")
        return False

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
bot = TelegramBot() 