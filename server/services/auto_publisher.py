"""
–°–µ—Ä–≤–∏—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –≤ Telegram –∫–∞–Ω–∞–ª
"""
import asyncio
import logging
import requests
from datetime import datetime, timedelta
from typing import List, Optional, Dict, Any
from sqlalchemy.orm import Session
from sqlalchemy import desc

from db import get_db_session, NewsItem, NewsSource
from config import (
    TOKEN, CHANNEL_ID, AUTO_PUBLISH_ENABLED, AUTO_PUBLISH_INTERVAL,
    AUTO_PUBLISH_LIMIT, POST_SIGNATURE, SOURCE_LINK_TEXT
)

logger = logging.getLogger(__name__)


class AutoPublisher:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –≤ Telegram –∫–∞–Ω–∞–ª"""
    
    def __init__(self):
        self.token = TOKEN
        self.channel_id = CHANNEL_ID
        self.enabled = AUTO_PUBLISH_ENABLED
        self.interval = AUTO_PUBLISH_INTERVAL
        self.limit = AUTO_PUBLISH_LIMIT
        self.signature = POST_SIGNATURE
        self.source_link_text = SOURCE_LINK_TEXT
        
        if not self.token:
            logger.error("Telegram bot token not configured!")
            self.enabled = False
            
        if not self.channel_id:
            logger.error("Channel ID not configured!")
            self.enabled = False
    
    def clean_text_for_telegram(self, text: str) -> str:
        """
        –û—á–∏—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç —Å–∏–º–≤–æ–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤—ã–∑–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å Markdown
        """
        import re
        
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã Markdown
        text = re.sub(r'([*_`\[\]()~>#+=|{}.!-])', r'\\\1', text)
        
        # –£–±–∏—Ä–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ–±—Ä–∞—Ç–Ω—ã–µ —Å–ª–µ—à–∏
        text = re.sub(r'\\{2,}', r'\\', text)
        
        return text
    
    def format_post_content(self, news_item: NewsItem, source: Optional[NewsSource] = None) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ—Å—Ç–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ Telegram –∫–∞–Ω–∞–ª
        """
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
        content_parts = []
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        content_parts.append(f"üì∞ <b>{self.clean_text_for_telegram(news_item.title)}</b>")
        content_parts.append("")
        
        # –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–ø–µ—Ä–≤—ã–µ 300 —Å–∏–º–≤–æ–ª–æ–≤)
        description = news_item.content[:300]
        if len(news_item.content) > 300:
            description += "..."
        content_parts.append(self.clean_text_for_telegram(description))
        content_parts.append("")
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏—è
        category_emoji = {
            'gifts': 'üéÅ',
            'crypto': 'üí∞',
            'nft': 'üñºÔ∏è',
            'tech': 'üíª',
            'community': 'üë•',
            'general': 'üì¢'
        }
        emoji = category_emoji.get(news_item.category, 'üì¢')
        content_parts.append(f"{emoji} –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {news_item.category}")
        
        # –ê–≤—Ç–æ—Ä/–∏—Å—Ç–æ—á–Ω–∏–∫
        if news_item.author:
            content_parts.append(f"üë§ –ê–≤—Ç–æ—Ä: {self.clean_text_for_telegram(news_item.author)}")
        
        # –í—Ä–µ–º—è —á—Ç–µ–Ω–∏—è
        if news_item.reading_time:
            content_parts.append(f"‚è±Ô∏è –í—Ä–µ–º—è —á—Ç–µ–Ω–∏—è: {news_item.reading_time} –º–∏–Ω")
        
        # –ü—Ä–æ—Å–º–æ—Ç—Ä—ã
        if news_item.views_count:
            content_parts.append(f"üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: {news_item.views_count}")
        
        content_parts.append("")
        
        # –ü–æ–¥–ø–∏—Å—å –∏ —Å—Å—ã–ª–∫–∞ –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫
        content_parts.append(f"---")
        content_parts.append(f"{self.clean_text_for_telegram(self.signature)}")
        content_parts.append("")
        content_parts.append(f"{self.source_link_text}: {news_item.link}")
        
        return "\n".join(content_parts)
    
    def get_media_data(self, news_item: NewsItem) -> Optional[Dict[str, Any]]:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –º–µ–¥–∏–∞ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        """
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: media JSON > image_url > video_url
        if news_item.media:
            try:
                if isinstance(news_item.media, str):
                    import json
                    media_data = json.loads(news_item.media)
                else:
                    media_data = news_item.media
                
                # –ï—Å–ª–∏ —ç—Ç–æ —Å–ø–∏—Å–æ–∫ –º–µ–¥–∏–∞, –±–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ
                if isinstance(media_data, list) and media_data:
                    media_data = media_data[0]
                
                if media_data.get('type') == 'photo' and media_data.get('url'):
                    return {
                        'type': 'photo',
                        'url': media_data['url']
                    }
                elif media_data.get('type') == 'video' and media_data.get('url'):
                    return {
                        'type': 'video',
                        'url': media_data['url']
                    }
            except Exception as e:
                logger.warning(f"Error parsing media for news {news_item.id}: {e}")
        
        # Fallback –∫ image_url –∏–ª–∏ video_url
        if news_item.image_url:
            return {
                'type': 'photo',
                'url': news_item.image_url
            }
        elif news_item.video_url:
            return {
                'type': 'video',
                'url': news_item.video_url
            }
        
        return None
    
    async def publish_news_to_channel(self, news_item: NewsItem) -> Optional[int]:
        """
        –ü—É–±–ª–∏–∫—É–µ—Ç –Ω–æ–≤–æ—Å—Ç—å –≤ Telegram –∫–∞–Ω–∞–ª
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª–µ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫
            db = get_db_session()
            source = db.query(NewsSource).filter(NewsSource.id == news_item.source_id).first()
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
            content = self.format_post_content(news_item, source)
            
            # –ü–æ–ª—É—á–∞–µ–º –º–µ–¥–∏–∞
            media_data = self.get_media_data(news_item)
            
            # –ü—É–±–ª–∏–∫—É–µ–º –≤ –∫–∞–Ω–∞–ª
            if media_data and media_data['type'] == 'photo':
                # –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å —Ñ–æ—Ç–æ
                response = requests.post(
                    f"https://api.telegram.org/bot{self.token}/sendPhoto",
                    data={
                        'chat_id': self.channel_id,
                        'photo': media_data['url'],
                        'caption': content,
                        'parse_mode': 'HTML'
                    },
                    timeout=30
                )
            elif media_data and media_data['type'] == 'video':
                # –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å –≤–∏–¥–µ–æ
                response = requests.post(
                    f"https://api.telegram.org/bot{self.token}/sendVideo",
                    data={
                        'chat_id': self.channel_id,
                        'video': media_data['url'],
                        'caption': content,
                        'parse_mode': 'HTML'
                    },
                    timeout=30
                )
            else:
                # –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–∞
                response = requests.post(
                    f"https://api.telegram.org/bot{self.token}/sendMessage",
                    data={
                        'chat_id': self.channel_id,
                        'text': content,
                        'parse_mode': 'HTML',
                        'disable_web_page_preview': False
                    },
                    timeout=30
                )
            
            if response.status_code == 200:
                result = response.json()
                if result.get('ok'):
                    message_id = result['result']['message_id']
                    logger.info(f"Successfully published news {news_item.id} to channel, message_id: {message_id}")
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                    news_item.is_published_to_channel = True
                    news_item.published_to_channel_at = datetime.utcnow()
                    news_item.telegram_message_id = message_id
                    db.commit()
                    
                    return message_id
                else:
                    logger.error(f"Telegram API error: {result}")
                    return None
            else:
                logger.error(f"HTTP error {response.status_code}: {response.text}")
                return None
                
        except Exception as e:
            logger.error(f"Error publishing news {news_item.id} to channel: {e}")
            return None
        finally:
            if 'db' in locals():
                db.close()
    
    def get_unpublished_news(self, limit: int = None) -> List[NewsItem]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –Ω–µ–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        """
        try:
            db = get_db_session()
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –Ω–µ–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏
            query = db.query(NewsItem).filter(
                NewsItem.is_published_to_channel == False
            ).order_by(desc(NewsItem.publish_date))
            
            if limit:
                query = query.limit(limit)
            
            news_items = query.all()
            logger.info(f"Found {len(news_items)} unpublished news items")
            
            return news_items
            
        except Exception as e:
            logger.error(f"Error getting unpublished news: {e}")
            return []
        finally:
            if 'db' in locals():
                db.close()
    
    async def publish_batch(self, force: bool = False) -> int:
        """
        –ü—É–±–ª–∏–∫—É–µ—Ç –ø–∞–∫–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π –≤ –∫–∞–Ω–∞–ª
        force: –µ—Å–ª–∏ True, –ø—É–±–ª–∏–∫—É–µ—Ç –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç AUTO_PUBLISH_ENABLED (–¥–ª—è —Ä—É—á–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏)
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
        """
        if not self.enabled and not force:
            logger.info("Auto publishing is disabled")
            return 0
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏
            news_items = self.get_unpublished_news(self.limit)
            
            if not news_items:
                logger.info("No unpublished news to publish")
                return 0
            
            published_count = 0
            
            # –ü—É–±–ª–∏–∫—É–µ–º –∫–∞–∂–¥—É—é –Ω–æ–≤–æ—Å—Ç—å —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
            for news_item in news_items:
                try:
                    message_id = await self.publish_news_to_channel(news_item)
                    if message_id:
                        published_count += 1
                        logger.info(f"Published news {news_item.id} (message_id: {message_id})")
                    
                    # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø—É–±–ª–∏–∫–∞—Ü–∏—è–º–∏ (—á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å)
                    await asyncio.sleep(5)
                    
                except Exception as e:
                    logger.error(f"Error publishing news {news_item.id}: {e}")
                    continue
            
            logger.info(f"Published {published_count} news items to channel")
            return published_count
            
        except Exception as e:
            logger.error(f"Error in publish_batch: {e}")
            return 0
    
    async def start_auto_publishing(self):
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ø—É–±–ª–∏–∫–∞—Ü–∏—é –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
        """
        if not self.enabled:
            logger.info("Auto publishing is disabled, not starting")
            return
        
        logger.info(f"Starting auto publishing service (interval: {self.interval}s)")
        
        while True:
            try:
                await self.publish_batch()
                await asyncio.sleep(self.interval)
            except Exception as e:
                logger.error(f"Error in auto publishing loop: {e}")
                await asyncio.sleep(60)  # –ñ–¥–µ–º –º–∏–Ω—É—Ç—É –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
auto_publisher = AutoPublisher()
